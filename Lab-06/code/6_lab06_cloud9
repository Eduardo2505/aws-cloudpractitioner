#!/bin/bash

#Ubuntu 18.04
sudo apt-get update
sudo apt-get install jq -y

#Descargar código
git clone https://github.com/jbarreto7991/crud-aws.git

#Obteniendo nombre de DNS del Balanceador
REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')
ALB_DNS_NAME=$(aws elbv2 describe-load-balancers --region $REGION | jq -r '.LoadBalancers[] | .DNSName')

#Reemplazando parámetro en archivo de configuración del frontend - Frontend
sed 's+http://$PUBLIC_IP/v1+http://'"$ALB_DNS_NAME"'/v1+g' ~/environment/crud-aws/frontend/src/config/axios.js >> ~/environment/crud-aws/frontend/src/config/bk_axios.js
rm ~/environment/crud-aws/frontend/src/config/axios.js
mv ~/environment/crud-aws/frontend/src/config/bk_axios.js ~/environment/crud-aws/frontend/src/config/axios.js

#Compilar frontend
cd ~/environment/crud-aws/frontend
npm install
npm run build
cd ~/environment/crud-aws/frontend/build/

#Enviar actualización a S3
BUCKET=$(aws s3 ls | sort -r | awk 'NR ==1 { print $3 }')
aws s3 sync . s3://$BUCKET

#Registrar instancia EC2 a Target Group del Balanceador
ALB_ARN=$(aws elbv2 describe-load-balancers | jq -r '.LoadBalancers[] | .LoadBalancerArn')
TARGETGROUP_ARN=$(aws elbv2 describe-target-groups --load-balancer-arn $ALB_ARN | jq -r '.TargetGroups[] | .TargetGroupArn')
INSTANCES_ID=$(aws ec2 describe-instances --filters Name=tag-value,Values="EC2 BACKEND" | jq -r '.Reservations[] | .Instances[] | .InstanceId')
aws elbv2 register-targets --target-group-arn $TARGETGROUP_ARN --targets Id=$INSTANCES_ID,Port=80


#EJECUTAR LOS SIGUIENTES COMANDOS DESPUÉS DE LA EJECUCIÓN DEL CLOUDFORMATION #9 LAB-AUTOSCALING-ASG

#Eliminar Instancia EC2 Original
REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')
INSTANCES_ID=$(aws ec2 describe-instances --filters Name=tag-value,Values="EC2 BACKEND" | jq -r '.Reservations[] | .Instances[] | .InstanceId')
aws ec2 terminate-instances --instance-id $INSTANCES_ID


#DESDE CADA INSTANCIA A TRAVÉS DE SESSION MANAGER EJECUTAR LOS SIGUIENTES COMANDOS DESPUÉS DE LA EJECUCIÓN DEL CLOUDFORMATION #10 CLOUDWATCH ALARM ASG
sudo apt-get install stress
stress -c 4


#EJECUTAR LOS SIGUIENTES COMANDOS DESPUÉS DE LA EJECUCIÓN DEL CLOUDFORMATION #11 CLOUDFRONT
BUCKET=$(aws s3 ls | sort -r | awk 'NR ==1 { print $3 }')
aws s3api delete-bucket-website --bucket $BUCKET
aws s3api put-public-access-block --bucket $BUCKET --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
aws s3api delete-bucket-policy --bucket $BUCKET


#AL AGREGAR EL DOMINIO PERSONALIZADO Y EL CERTIFICADO HTTPS
#MODIFICAR CLOUDFRONT - CERTIFICADO Y DOMINIO 
#MODIFICAR ROUTE53 - AGREGAR CLOUDFRONT
#COMPILAR EL CÓDIGO - VER LINEAS A CONTINUACIÓN (VALIDAR DOMINIO ALB EN axios.js Y SUBIR A S3)
#INVALIDATION - CLOUDFRONT
#MODIFICAR ROUTE53 - AGREGAR ALB

rm -r ~/environment/crud-aws/
git clone https://github.com/jbarreto7991/crud-aws.git
sed 's+http://$PUBLIC_IP/v1+https://'alb.jorgebarretoolivos.com'/v1+g' ~/environment/crud-aws/frontend/src/config/axios.js >> ~/environment/crud-aws/frontend/src/config/bk_axios.js
rm ~/environment/crud-aws/frontend/src/config/axios.js
mv ~/environment/crud-aws/frontend/src/config/bk_axios.js ~/environment/crud-aws/frontend/src/config/axios.js

cd ~/environment/crud-aws/frontend
npm install
npm run build
cd ~/environment/crud-aws/frontend/build/

BUCKET=$(aws s3 ls | sort -r | awk 'NR ==1 { print $3 }')
aws s3 sync . s3://$BUCKET


#ELIMINACION DE RECURSOS
aws cloudformation delete-stack --stack-name lab-cloudfront
aws cloudformation delete-stack --stack-name lab-cloudwatch-alarm-asg
aws cloudformation delete-stack --stack-name lab-autoscaling-asg
aws cloudformation delete-stack --stack-name lab-efs
aws cloudformation delete-stack --stack-name lab-secretmanager-rds
#[Continuar sólo si el Stack "lab-autoscaling-asg" se eliminó totalmente]
aws cloudformation delete-stack --stack-name lab-sns
aws cloudformation delete-stack --stack-name lab-autoscaling-launchconfiguration
aws cloudformation delete-stack --stack-name lab-alb-targetgroup
#[Continuar sólo si el Stack "lab-alb-targetgroup" se eliminó totalmente]
aws s3 rm s3://$BUCKET --recursive
aws cloudformation delete-stack --stack-name lab-ec2-s3
#[Continuar sólo si el Stack "lab-ec2-s3" se eliminó totalmente]
aws cloudformation delete-stack --stack-name lab-vpc
#ELIMINAR CLOOUD9

#DEREGISTER AMI
#ELIMINAR SNAPSHOTS
#RELEASE ELASTIC IP
#ELIMINAR BUCKET